
{
  "openapi": "3.0.3",
  "info": {
    "title": "MonetizePro API",
    "description": "A comprehensive API for creating and managing monetization pages, products, sessions, and access codes. This API allows for programmatic control over the MonetizePro platform, enabling integrations and automation.",
    "version": "1.0.0"
  },
  "servers": [
    {
      "url": "https://api.monetizepro.app/v1"
    }
  ],
  "tags": [
    { "name": "Pages", "description": "Endpoints for managing Monetization Pages." },
    { "name": "Products & Pricing", "description": "Manage reusable products and their associated prices." },
    { "name": "Coupons & Rates", "description": "Manage coupons, tax rates, and shipping rates." },
    { "name": "Sessions & Access Codes", "description": "Endpoints for retrieving session data and managing access codes." },
    { "name": "Verification", "description": "Public-facing endpoints for verifying assets." },
    { "name": "Settings & Admin", "description": "Manage account-level settings and platform actions." }
  ],
  "security": [
    {
      "apiKeyAuth": []
    }
  ],
  "paths": {
    "/pages": {
      "get": {
        "tags": ["Pages"],
        "summary": "List All Monetization Pages",
        "operationId": "listPages",
        "parameters": [
          { "$ref": "#/components/parameters/LimitParam" },
          { "$ref": "#/components/parameters/OffsetParam" }
        ],
        "responses": {
          "200": {
            "description": "A paginated list of pages.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "type": "array",
                      "items": { "$ref": "#/components/schemas/PageConfig" }
                    },
                    "pagination": { "$ref": "#/components/schemas/Pagination" }
                  }
                }
              }
            }
          },
          "401": { "$ref": "#/components/responses/UnauthorizedError" }
        }
      },
      "post": {
        "tags": ["Pages"],
        "summary": "Create a Monetization Page",
        "operationId": "createPage",
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": { "$ref": "#/components/schemas/PageConfigUpdate" }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Page created successfully.",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/PageConfig" }
              }
            }
          },
          "400": { "$ref": "#/components/responses/BadRequest" },
          "401": { "$ref": "#/components/responses/UnauthorizedError" }
        }
      }
    },
    "/pages/{pageId}": {
      "parameters": [ { "$ref": "#/components/parameters/PageIdParam" } ],
      "get": {
        "tags": ["Pages"],
        "summary": "Get a Specific Page",
        "operationId": "getPageById",
        "responses": {
          "200": {
            "description": "The requested page configuration.",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/PageConfig" } } }
          },
          "404": { "$ref": "#/components/responses/NotFound" }
        }
      },
      "put": {
        "tags": ["Pages"],
        "summary": "Update a Page",
        "operationId": "updatePage",
        "requestBody": {
          "required": true,
          "content": { "application/json": { "schema": { "$ref": "#/components/schemas/PageConfigUpdate" } } }
        },
        "responses": {
          "200": {
            "description": "Page updated successfully.",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/PageConfig" } } }
          },
          "400": { "$ref": "#/components/responses/BadRequest" }
        }
      },
      "delete": {
        "tags": ["Pages"],
        "summary": "Delete a Page",
        "operationId": "deletePage",
        "responses": {
          "204": { "description": "Page deleted successfully." }
        }
      }
    },
    "/pages/{pageId}/publish": {
      "parameters": [ { "$ref": "#/components/parameters/PageIdParam" } ],
      "post": {
        "tags": ["Pages"],
        "summary": "Publish a Page",
        "operationId": "publishPage",
        "responses": {
          "200": {
            "description": "Page published successfully.",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/PageConfig" } } }
          }
        }
      }
    },
    "/pages/{pageId}/access-codes": {
      "parameters": [ { "$ref": "#/components/parameters/PageIdParam" } ],
      "post": {
        "tags": ["Sessions & Access Codes"],
        "summary": "Generate Access Codes",
        "operationId": "generateAccessCodes",
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "quantity": { "type": "integer", "minimum": 1, "maximum": 1000, "example": 50 }
                },
                "required": ["quantity"]
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Access codes generated successfully.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "message": { "type": "string" },
                    "generatedCount": { "type": "integer" }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/sessions/{sessionId}/revoke": {
       "parameters": [ { "$ref": "#/components/parameters/SessionIdParam" } ],
       "post": {
         "tags": ["Sessions & Access Codes"],
         "summary": "Revoke a Session or Access Code",
         "operationId": "revokeSession",
         "responses": {
           "200": { "description": "Session/code revoked." }
         }
       }
    },
    "/verify/{accessCode}": {
      "get": {
        "tags": ["Verification"],
        "summary": "Verify an Access Code",
        "description": "A public endpoint to check the authenticity and status of a given access code.",
        "operationId": "verifyCode",
        "security": [],
        "parameters": [
          {
            "name": "accessCode",
            "in": "path",
            "required": true,
            "schema": { "type": "string" },
            "description": "The access code to verify."
          }
        ],
        "responses": {
          "200": {
            "description": "Verification details.",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/PageSession" } } }
          },
          "404": { "$ref": "#/components/responses/NotFound" }
        }
      }
    },
    "/admin/actions/anchor-proofs": {
      "post": {
        "tags": ["Settings & Admin"],
        "summary": "Anchor Authenticity Proofs",
        "description": "Triggers the batch process to anchor all pending authenticity proofs on the simulated blockchain.",
        "operationId": "anchorProofs",
        "responses": {
          "200": {
            "description": "Anchoring process completed.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "message": { "type": "string" },
                    "anchoredCount": { "type": "integer" }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/settings/payouts": {
      "get": {
        "tags": ["Settings & Admin"],
        "summary": "Get Payout Settings",
        "operationId": "getPayoutSettings",
        "responses": {
          "200": {
            "description": "Current payout settings for the tenant.",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/TenantSettings" } } }
          }
        }
      },
      "put": {
        "tags": ["Settings & Admin"],
        "summary": "Update Payout Settings",
        "operationId": "updatePayoutSettings",
        "requestBody": {
          "required": true,
          "content": { "application/json": { "schema": { "$ref": "#/components/schemas/TenantSettingsUpdate" } } }
        },
        "responses": {
          "200": {
            "description": "Settings updated successfully.",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/TenantSettings" } } }
          }
        }
      }
    }
  },
  "components": {
    "schemas": {
      "ErrorResponse": {
        "type": "object",
        "properties": {
          "code": { "type": "string" },
          "message": { "type": "string" }
        }
      },
      "Pagination": {
        "type": "object",
        "properties": {
          "total": { "type": "integer" },
          "limit": { "type": "integer" },
          "offset": { "type": "integer" }
        }
      },
      "PageConfig": {
        "type": "object",
        "description": "The full configuration for a monetization page.",
        "properties": {
          "id": { "type": "string", "readOnly": true },
          "tenantId": { "type": "string", "readOnly": true },
          "status": { "type": "string", "enum": ["draft", "published"] },
          "pageSlug": { "type": "string", "pattern": "^[a-zA-Z0-9-]+$" },
          "useCase": { "type": "string" },
          "currency": { "type": "string", "example": "usd" },
          "line_items": {
            "type": "array",
            "items": { "type": "object" }
          }
        }
      },
      "PageConfigUpdate": {
        "type": "object",
        "description": "Fields for creating or updating a monetization page.",
        "properties": {
          "pageSlug": { "type": "string", "pattern": "^[a-zA-Z0-9-]+$" },
          "useCase": { "type": "string" },
          "currency": { "type": "string", "example": "usd" },
          "line_items": {
            "type": "array",
            "items": { "type": "object" }
          },
          "custom_fields": {
            "type": "array",
            "items": { "type": "object" }
          }
        }
      },
      "PageSession": {
        "type": "object",
        "properties": {
          "sessionId": { "type": "string" },
          "accessCode": { "type": "string" },
          "status": { "type": "string" },
          "verificationStatus": { "type": "string" },
          "authenticityHash": { "type": "string" },
          "pageConfig": { "$ref": "#/components/schemas/PageConfig" },
          "paymentDetails": { "type": "object" }
        }
      },
      "TenantSettings": {
        "type": "object",
        "properties": {
          "payoutMethod": { "type": "string", "enum": ["unselected", "payoneer_wise", "stripe_connect"] },
          "stripeAccountId": { "type": "string", "readOnly": true },
          "platformPayoutDetails": {
            "type": "object",
            "properties": {
              "beneficiaryName": { "type": "string" },
              "payoutEmail": { "type": "string", "format": "email" }
            }
          }
        }
      },
      "TenantSettingsUpdate": {
        "type": "object",
        "properties": {
          "payoutMethod": { "type": "string", "enum": ["payoneer_wise", "stripe_connect"] },
          "platformPayoutDetails": {
            "type": "object",
            "properties": {
              "beneficiaryName": { "type": "string" },
              "payoutEmail": { "type": "string", "format": "email" }
            },
            "description": "Required if payoutMethod is 'payoneer_wise'."
          }
        }
      }
    },
    "parameters": {
      "PageIdParam": {
        "name": "pageId",
        "in": "path",
        "required": true,
        "schema": { "type": "string" },
        "description": "The ID of the monetization page."
      },
      "SessionIdParam": {
        "name": "sessionId",
        "in": "path",
        "required": true,
        "schema": { "type": "string" },
        "description": "The ID of the session."
      },
      "LimitParam": {
        "name": "limit",
        "in": "query",
        "schema": { "type": "integer", "default": 20 },
        "description": "Number of items to return."
      },
      "OffsetParam": {
        "name": "offset",
        "in": "query",
        "schema": { "type": "integer", "default": 0 },
        "description": "Number of items to skip for pagination."
      }
    },
    "responses": {
      "NotFound": { "description": "The requested resource was not found.", "content": { "application/json": { "schema": { "$ref": "#/components/schemas/ErrorResponse" } } } },
      "BadRequest": { "description": "The request was invalid.", "content": { "application/json": { "schema": { "$ref": "#/components/schemas/ErrorResponse" } } } },
      "UnauthorizedError": { "description": "Authentication information is missing or invalid.", "content": { "application/json": { "schema": { "$ref": "#/components/schemas/ErrorResponse" } } } }
    },
    "securitySchemes": {
      "apiKeyAuth": {
        "type": "apiKey",
        "in": "header",
        "name": "X-API-Key"
      }
    }
  }
}
